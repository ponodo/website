<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ponodo</title>
    <link>https://ponodo.dev/</link>
    <description>Recent content on Ponodo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://ponodo.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://ponodo.dev/docs/v1/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/deployment/</guid>
      <description>Deployment Gunicorn gunicorn -w 4 -b 0.0.0.0:5000 your_project:app The -w 4 option uses 4 workers to handle 4 requests at once. The -b 0.0.0.0:5000 serves the application on all interfaces on port 5000.
Gunicorn provides many options for configuring the server, either through a configuration file or with command line options. Use gunicorn &amp;ndash;help or see the docs for more information.
The command expects the name of your module or package to import and the application instance within the module.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ponodo.dev/docs/v1/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/introduction/</guid>
      <description>Introduction Where to Start Learning a new framework can be overwhelming, much think to learn, but also it can be very exciting. To smooth your learning progress, we have attempted to create very clear documentation. Here are some recommendation to read first.
Installing and configuration Routing Requests and input Responses Controllers Model Ponodo Philosophy Ponodo is a web application framework with expressive, elegant syntax for pythonista. We believe development must be an enjoyable, creative experience to be truly fulfilling.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ponodo.dev/docs/v1/model-callbacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/model-callbacks/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://ponodo.dev/docs/v1/model-validations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/model-validations/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://ponodo.dev/docs/v1/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/readme/</guid>
      <description>Qonnodo Documentation You can find the online version of the Ponodo documentation at https://qonnodo.com/documentation
Contribution Guideline If you are submitting documentation for the current stable release, submit it to the corresponding branch. For example, documentation for Qonnodo 1 would be submitted to the 1.x branch. Documentation intended for the next release of Qonnodo should be submitted to the master branch.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ponodo.dev/docs/v1/template-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/template-engine/</guid>
      <description>Template Engine Introduction Ponodo include a simple yet powerful templating engine. All templates are compiled into plain Python code and cached until they are modified, meaning this adds essentially zero overhead to your application. The template template files use the .html file extension and are typically stored in the app/views directory.
Views may be returned from routes or controllers using view method. Of course, as mentioned in the documentation on views, data may be passed using the view method&amp;rsquo;s second argument:</description>
    </item>
    
    <item>
      <title>Application Container</title>
      <link>https://ponodo.dev/docs/v1/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/container/</guid>
      <description>Understanding the Ponodo container is essential to building a powerful, large application, and also contributing to the Ponodo core itself. Container like a foundation of your home, the stronger the foundation, the toughter the home you have.
There are two basic things in container, binding and resolving. This method make your application easy to configure and extend.
Binding Binding is assigning concrete into abstract thing. Concrete can be a working class instance or concrete class itself, normally concrete can be run functionally in your code base.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://ponodo.dev/docs/v1/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/configuration/</guid>
      <description>Introduction All of the configuration files for the Ponodo framework are stored in the config directory. Each option is documented, so feel free to look through the files and get familiar with the options available to you.
These configuration files allow you to configure things like your database connection information, &amp;hellip;
Environment Configuration It is often helpful to have different configuration values based on the environment where the application is running.</description>
    </item>
    
    <item>
      <title>Controllers</title>
      <link>https://ponodo.dev/docs/v1/controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/controllers/</guid>
      <description>class BookController(Controller): def index(self): return &amp;#39;hello&amp;#39; Middleware
class BookController(Controller): def __init__(self): self.middleware(&amp;#39;auth&amp;#39;) self.middleware(&amp;#39;auth&amp;#39;, only=[&amp;#39;index&amp;#39;]) self.middleware(&amp;#39;auth&amp;#39;, except_=[&amp;#39;view&amp;#39;]) def index(self): return &amp;#39;hello&amp;#39; </description>
    </item>
    
    <item>
      <title>Database Configuration</title>
      <link>https://ponodo.dev/docs/v1/db-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/db-configuration/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Directory Structure</title>
      <link>https://ponodo.dev/docs/v1/structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/structure/</guid>
      <description>The blog directory will have a number of generated files and folders that make up the structure of a Rails application. Most of the work in this tutorial will happen in the app folder, but here&amp;rsquo;s a basic rundown on the function of each of the files and folders that Rails creates by default:
app controllers models view layouts providers config db migrations public storage log tests routes Custom directory If you wish to organize your application by domain application.</description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>https://ponodo.dev/docs/v1/errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/errors/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Facades</title>
      <link>https://ponodo.dev/docs/v1/facades/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/facades/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://ponodo.dev/docs/v1/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/installation/</guid>
      <description>Requirements Install Pyenv Pyenv make switching between Python version easier. Although you can use your native Python in your operating system, it will cumbersome if you manage projects that has different versions. Pyenv also feel powerful when combining with virtual environment.
How to install it please refer to official Pyenv documentation.
Install Poetry Ponodo use Poetry to manage its dependencies. Just install as the documentation said and put the poetry binary in your PATH environment variable, then you ready to make awesome application.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>https://ponodo.dev/docs/v1/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/logging/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Migrations</title>
      <link>https://ponodo.dev/docs/v1/migrations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/migrations/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Model Basic</title>
      <link>https://ponodo.dev/docs/v1/model-basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/model-basic/</guid>
      <description>Convention Over Configuration Naming convention Schema convention Creating Model from ponodo.db import Model class Book(Model): pass book = Book() book.title = &amp;#39;Awesome Ponodo&amp;#39; book.save() Overriding The Naming Convention class Book(Model): table = &amp;#39;book&amp;#39; # Override the default books naming convention class Book(Model): primary = &amp;#39;book_id&amp;#39; # Override the default id naming convention Reading and Writing Data Create Book.create(title=&amp;#39;Kong vs Godzilla&amp;#39;, page=800) book = Book() book.title = &amp;#39;Kong vs Godzilla&amp;#39; book.page = 800 book.</description>
    </item>
    
    <item>
      <title>Registrars</title>
      <link>https://ponodo.dev/docs/v1/registrars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/registrars/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Relationships</title>
      <link>https://ponodo.dev/docs/v1/model-relationships/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/model-relationships/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Request Lifecycle</title>
      <link>https://ponodo.dev/docs/v1/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/lifecycle/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Requests</title>
      <link>https://ponodo.dev/docs/v1/requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/requests/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Responses</title>
      <link>https://ponodo.dev/docs/v1/responses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/responses/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://ponodo.dev/docs/v1/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/routing/</guid>
      <description>Basic Routing The most basic routes accept URI and a lambda function, providing a very simple method of defining routes without complicated routing parameters. This is the best place when your logic only contain one line of code, since lambda used to simplify function.
Route.get(&amp;#39;/welcome&amp;#39;, lambda: &amp;#39;Hello World!&amp;#39;) &amp;lt;?php Route::get(&amp;#39;/welcome&amp;#39;, function(Request $request) { $request-&amp;gt;get(&amp;#39;name&amp;#39;); }) The Default Route Files All Ponodo routes are defined in your route files, which are located in the routes directory.</description>
    </item>
    
    <item>
      <title>View</title>
      <link>https://ponodo.dev/docs/v1/view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ponodo.dev/docs/v1/view/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
